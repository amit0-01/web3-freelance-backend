generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  walletAddress    String?       @unique
  role             Role          @default(FREELANCER)
  isGuest          Boolean       @default(false)
  applications     Application[]
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
  sentMessages     ChatMessage[] @relation("SentMessages")
  employerJobs     Job[]         @relation("EmployerJobs")
  freelancerJobs   Job[]         @relation("FreelancerJobs")
}

model Job {
  id              Int           @id @default(autoincrement())
  title           String
  payment         Decimal       @default(0.0)
  deadline        DateTime?
  isPaid          Boolean       @default(false)
  employerId      Int
  freelancerId    Int?
  category        String[]
  deliverables    String[]
  description     String
  duration        String
  transactionHash String?
  isCompleted     Boolean       @default(false)
  applications    Application[]
  chatMessages    ChatMessage[]
  employer        User          @relation("EmployerJobs", fields: [employerId], references: [id])
  freelancer      User?         @relation("FreelancerJobs", fields: [freelancerId], references: [id])
  payments        Payment[]
}

model Application {
  id                Int               @id @default(autoincrement())
  jobId             Int
  userId            Int
  coverLetter       String
  proposedRate      Float
  estimatedDuration String
  portfolioLink     String?
  createdAt         DateTime          @default(now())
  status            ApplicationStatus @default(PENDING)
  job               Job               @relation(fields: [jobId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
}

model Payment {
  id              String    @id @default(cuid())
  amount          Float
  status          String
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  transactionHash String?
  type            String
  freelancerId    String
  freelancerName  String
  jobId           Int
  job             Job       @relation(fields: [jobId], references: [id])
}

model ChatMessage {
  id         String   @id @default(cuid())
  roomId     String
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  jobId      Int?
  job        Job?     @relation(fields: [jobId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

enum Role {
  FREELANCER
  CLIENT
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
